{
  "components": {
    "comp-condition-1": {
      "dag": {
        "outputs": {
          "artifacts": {
            "custom-training-job-component-metrics": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics",
                  "producerSubtask": "custom-training-job-component"
                }
              ]
            }
          }
        },
        "tasks": {
          "custom-training-job-component": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-custom-training-job-component"
            },
            "inputs": {
              "parameters": {
                "learning_rate": {
                  "runtimeValue": {
                    "constant": 0.2
                  }
                },
                "max_depth": {
                  "runtimeValue": {
                    "constant": 5.0
                  }
                },
                "n_estimators": {
                  "runtimeValue": {
                    "constant": 40.0
                  }
                }
              }
            },
            "taskInfo": {
              "name": "custom-training-job-component"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "pipelinechannel--validate-input-ds-input_validation": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "custom-training-job-component-metrics": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-custom-training-job-component": {
      "executorLabel": "exec-custom-training-job-component",
      "inputDefinitions": {
        "parameters": {
          "learning_rate": {
            "parameterType": "NUMBER_DOUBLE"
          },
          "max_depth": {
            "parameterType": "NUMBER_INTEGER"
          },
          "n_estimators": {
            "parameterType": "NUMBER_INTEGER"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "metrics": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "model_validation": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-validate-input-ds": {
      "executorLabel": "exec-validate-input-ds",
      "inputDefinitions": {
        "parameters": {
          "filename": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "input_validation": {
            "parameterType": "STRING"
          }
        }
      }
    }
  },
  "defaultPipelineRoot": "gs://udemy-gcp-mlops/credit-pipeline-v1",
  "deploymentSpec": {
    "executors": {
      "exec-custom-training-job-component": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "custom_training_job_component"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-aiplatform' 'gcsfs' 'xgboost' 'category_encoders' 'imblearn' 'pandas' 'google-cloud-storage' 'scikit-learn' 'fsspec' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef custom_training_job_component(\n    max_depth:int,\n    learning_rate:float,\n    n_estimators:int,\n    metrics: Output[Metrics]\n) -> NamedTuple(\"output\", [(\"model_validation\", str)]):\n\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from xgboost import XGBClassifier\n    from google.cloud import storage\n    from sklearn.metrics import precision_score, recall_score, accuracy_score, confusion_matrix\n\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(\"udemy-gcp-mlops\")\n\n    def purpose_encode(x):\n        if x == \"Consumer Goods\":\n            return 1\n        elif x == \"Vehicle\":\n            return 2\n        elif x == \"Tuition\":\n            return 3\n        elif x == \"Business\":\n            return 4\n        elif x == \"Repairs\":\n            return 5\n        else:\n            return 0\n\n    def other_parties_encode(x):\n        if x == \"Guarantor\":\n            return 1\n        elif x == \"Co-Applicant\":\n            return 2\n        else:\n            return 0\n\n    def qualification_encode(x):\n        if x == \"unskilled\":\n            return 1\n        elif x == \"skilled\":\n            return 2\n        elif x == \"highly skilled\":\n            return 3\n        else:\n            return 0\n\n    def credit_standing_encode(x):\n        if x == \"good\":\n            return 1\n        else:\n            return 0\n\n    def assets_encode(x):\n        if x == \"Vehicle\":\n            return 1\n        elif x == \"Investments\":\n            return 2\n        elif x == \"Home\":\n            return 3\n        else:\n            return 0\n\n    def housing_encode(x):\n        if x == \"rent\":\n            return 1\n        elif x == \"own\":\n            return 2\n        else:\n            return 0\n\n    def marital_status_encode(x):\n        if x == \"Married\":\n            return 1\n        elif x == \"Single\":\n            return 2\n        else:\n            return 0\n\n    def other_payment_plans_encode(x):\n        if x == \"bank\":\n            return 1\n        elif x == \"stores\":\n            return 2\n        else:\n            return 0\n\n    def sex_encode(x):\n        if x == \"M\":\n            return 1\n        else:\n            return 0\n\n    def credit_score_decode(x):\n        return \"Approved\" if x == 1 else \"Denied\"\n\n    def preprocess_data(df):\n        df[\"PURPOSE_CODE\"] = df[\"PURPOSE\"].apply(purpose_encode)\n        df[\"OTHER_PARTIES_CODE\"] = df[\"OTHER_PARTIES\"].apply(other_parties_encode)\n        df[\"QUALIFICATION_CODE\"] = df[\"QUALIFICATION\"].apply(qualification_encode)\n        df[\"CREDIT_STANDING_CODE\"] = df[\"CREDIT_STANDING\"].apply(credit_standing_encode)\n        df[\"ASSETS_CODE\"] = df[\"ASSETS\"].apply(assets_encode)\n        df[\"HOUSING_CODE\"] = df[\"HOUSING\"].apply(housing_encode)\n        df[\"MARITAL_STATUS_CODE\"] = df[\"MARITAL_STATUS\"].apply(marital_status_encode)\n        df[\"OTHER_PAYMENT_PLANS_CODE\"] = df[\"OTHER_PAYMENT_PLANS\"].apply(other_payment_plans_encode)\n        df[\"SEX_CODE\"] = df[\"SEX\"].apply(sex_encode)\n\n        columns_to_drop = [\"PURPOSE\", \"OTHER_PARTIES\", \"QUALIFICATION\", \"CREDIT_STANDING\",\n                        \"ASSETS\", \"HOUSING\", \"MARITAL_STATUS\", \"OTHER_PAYMENT_PLANS\", \"SEX\"]\n        df = df.drop(columns=columns_to_drop)\n\n        return df\n\n    def split_data(df):\n        X_train, X_test, y_train, y_test = train_test_split(df.drop('CREDIT_STANDING_CODE', axis=1), \n                                                            df['CREDIT_STANDING_CODE'], test_size=0.30)\n        return X_train, X_test, y_train, y_test\n\n\n    def train_model(X_train, y_train,max_depth,learning_rate,n_estimators):    \n        model = XGBClassifier(\n            max_depth=max_depth,\n            learning_rate=learning_rate,\n            n_estimators=n_estimators,\n            random_state=42,\n            use_label_encoder=False\n        )    \n        model.fit(X_train, y_train)\n        return model\n\n    def save_model_artifact(pipeline):\n        artifact_name = 'model.bst'\n        pipeline.save_model(artifact_name)\n        model_artifact = bucket.blob('credit-scoring/artifacts/'+artifact_name)\n        model_artifact.upload_from_filename(artifact_name)\n\n    def evaluate_model(model, X_test, y_test):\n        y_pred = model.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        precision = precision_score(y_test, y_pred)\n        recall = recall_score(y_test, y_pred)\n        conf_matrix = confusion_matrix(y_test, y_pred)\n\n        return accuracy, precision, recall, conf_matrix\n\n    input_file = \"gs://udemy-gcp-mlops/credit-scoring/credit_files.csv\"\n    credit_df = pd.read_csv(input_file)\n    credit_df = preprocess_data(credit_df)\n\n    X_train, X_test, y_train, y_test = split_data(credit_df)\n\n    pipeline = train_model(X_train, y_train, max_depth, learning_rate, n_estimators)\n\n    accuracy, precision, recall, conf_matrix = evaluate_model(pipeline, X_test, y_test)\n\n    metrics.log_metric(\"accuracy\", accuracy)\n    metrics.log_metric(\"precision\", precision)\n    metrics.log_metric(\"recall\", recall)\n\n    if accuracy > 0.5 and precision > 0.5:\n        save_model_artifact(pipeline)\n        model_validation = \"true\"\n    else :\n        model_validation = \"false\"\n\n    return (model_validation, )\n\n"
          ],
          "image": "python:3.8"
        }
      },
      "exec-validate-input-ds": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "validate_input_ds"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'gcsfs' 'pandas' 'google-cloud-storage' 'kfp' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef validate_input_ds(filename: str) -> NamedTuple(\"output\", [(\"input_validation\", str)]):\n\n    import logging\n    from google.cloud import storage\n    import pandas as pd\n\n    logging.basicConfig(level=logging.INFO)\n\n    logging.info(f\"Reading file: {filename}\")\n    df = pd.read_csv(filename)\n    expected_num_cols = 21\n    num_cols = len(df.columns)\n\n    logging.info(f\"Number of columns: {num_cols}\")\n\n    input_validation = \"true\"\n\n    if num_cols != expected_num_cols:\n        input_validation = \"false\"\n\n    return (input_validation, )\n\n"
          ],
          "image": "python:3.8"
        }
      }
    }
  },
  "pipelineInfo": {
    "name": "credit-scoring-training-pipeline"
  },
  "root": {
    "dag": {
      "outputs": {
        "artifacts": {
          "custom-training-job-component-metrics": {
            "artifactSelectors": [
              {
                "outputArtifactKey": "custom-training-job-component-metrics",
                "producerSubtask": "condition-1"
              }
            ]
          }
        }
      },
      "tasks": {
        "condition-1": {
          "componentRef": {
            "name": "comp-condition-1"
          },
          "dependentTasks": [
            "validate-input-ds"
          ],
          "inputs": {
            "parameters": {
              "pipelinechannel--validate-input-ds-input_validation": {
                "taskOutputParameter": {
                  "outputParameterKey": "input_validation",
                  "producerTask": "validate-input-ds"
                }
              }
            }
          },
          "taskInfo": {
            "name": "condition-1"
          },
          "triggerPolicy": {
            "condition": "inputs.parameter_values['pipelinechannel--validate-input-ds-input_validation'] == 'true'"
          }
        },
        "validate-input-ds": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-validate-input-ds"
          },
          "inputs": {
            "parameters": {
              "filename": {
                "runtimeValue": {
                  "constant": "gs://udemy-gcp-mlops/credit-scoring/credit_files.csv"
                }
              }
            }
          },
          "taskInfo": {
            "name": "validate-input-ds"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "project": {
          "defaultValue": "dataanalytics-347914",
          "isOptional": true,
          "parameterType": "STRING"
        },
        "region": {
          "defaultValue": "us-central1",
          "isOptional": true,
          "parameterType": "STRING"
        }
      }
    },
    "outputDefinitions": {
      "artifacts": {
        "custom-training-job-component-metrics": {
          "artifactType": {
            "schemaTitle": "system.Metrics",
            "schemaVersion": "0.0.1"
          }
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.8.0"
}